import axios, { AxiosRequestConfig, AxiosRequestHeaders } from "axios";import qs from "qs";import { ElMessageBox } from "element-plus";import { Options } from "@/types/common/api";import store from "@/store";/** * API URL PREFIX */const API_URL_PREFIX = '/api';/** * 에러 메시지 노출 카운트 */let errorCnt = 0;/** * API Form 객체 생성자 함수 * @param {String} path API 경로 * @param {Options} options axios 전송 옵션 */export default async (path: string, options?: Options): Promise<any> => {  let params = options?.params || {};  const headers = options?.headers || {};  const responseType = options?.responseType;  const method = options?.method || "get";  const disableLoading = options?.disableLoading || false;  const pageOptions = options?.pageOptions || null;  // axios request config 객체 생성  const config: AxiosRequestConfig = {    method,    withCredentials: true,    timeout: 30 * 1000,  };  // request headers  const defaultHeader: AxiosRequestHeaders = {    Accept: "application/json",    "Content-Type": "application/json; charset=utf-8",  };  config.headers = Object.assign(defaultHeader, headers);  // application/x-www-form-urlencoded 헤더 타입을 경우 데이터 query string 으로 변환  if (    config.headers["Content-Type"].toLowerCase() ===    "application/x-www-form-urlencoded"  ) {    params = qs.stringify(params);  }  // request payload setting (get | delete) 의 경우 params 나머지는 data  if (method.toLowerCase() === "get" || method.toLowerCase() === "delete") {    // GET / DELETE    config.params = params;  } else {    // POST / PUT    config.data = params;  }  // pagination 셋팅  if (pageOptions !== null) {    // pageRequest 설정    const pagePayload: any = Object.assign({}, pageOptions);    if (pagePayload.properties !== null) {      pagePayload.properties = pagePayload.properties.join();    }    if (method.toLowerCase() === "get" || method.toLowerCase() === "delete") {      config.params = Object.assign({}, config.params, pagePayload);    } else {      config.params = Object.assign({}, pagePayload);    }  }  // request url 셋팅  config.url = `${API_URL_PREFIX}${path}`;  // response 타입 셋팅  if (responseType) {    config.responseType = responseType;  }  // axios 실행  try {    const response = await axios(config);    return response;  } catch (error: any) {    // 오류 발생시 그 메시지 그대로 리턴    return error.response;  }};